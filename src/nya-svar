Vilka beroenden är nödvändiga?
- interface movable och Cars är en viktig beroende eftersom det håller samma standard för alla bilar med tanke på DIP principen om att programmera mot
gränsnitt för att koden ska bli flexibel och återanvändbar.
- Beroendet mellan Cars och subklasserna är nödvändigt pga att vi vill samla all gemensam kod vid abstrakta Cars klassen
för att undvika kodduplicering. Det är stark coupling men nödvändig.
- beroendet från Carcontroller till CarView är en nödvändig beroende med tanke på MVC pattern
eftersom controller ska säga till carview att uppdatera frame.
-Inkapslingen av Timelistener i carcontroller är en viktig beroende med anlendning av Cohesion.
Timelistener har egen innerklass eftersom den ansvarar för bara en uppgift.
-drawPanel till CarView är viktig beroende med tanke på cohesion eftersom drawpanel ansvarar endast för en uppgift och det
är för animeringen av bilden. de dynamiska delarna hanteras av drawpanel. och de statiska delarna hanteras av Carview.
(kan vi kapsla in drawpanel i carview)?

Vilka klasser är beroende av varandra som inte bör vara det?
-CarView ska inte vara beroende av Carcontroller eftersom view ska inte påverka hur bilen kontrolleras, endast tvärtom.och med
hänsyn till mvc pattern.


Finns det starkare beroenden än nödvändigt?

- CarController behöver inte relationen till Direction direkt, eftersom carcontrollern har ingen
direction utan det är Cars som ska ha direction. Med tanke på att via mvc pattern bör carcontroller
vara beronde av cars, och via den vägen får den bilens direction med tanke på aggregat (Has A) och coupling. (onödigt stark koppling)

Kan ni identifiera några brott mot övriga designprinciper vi pratat om i kursen?

-Med tanke på MVC pattern så bryter mönstret för designprincipen pga cykliska beroendet mellan controllen och view.
-Vi har även ingen direkt koppling mellan controll och modellen(cars).Carcontrollen är beroende av Cars eftersom den ska påverkas när Cars uppdateras,
dock inte motsatsen. med tanke på usage dependency ...> och att vi strävar efter så lös coupling så möjligt.
-Uml fel- Carservice generiska typ ärver Cars via (T extends Cars).Carcontroller och carservice ska hålla en lista av bilar via Cars klassen med assocation beroendet.Enligt MVC pattern måste Carcontroller
vara beroende till Cars eftersom försvinner cars så kan inte T extenda från Cars längre. (med tanke på usage dependency). Varje ändring i Cars
 ska påverka Carservice och Carcontrollen.
- Timelistener i CarController är en klass som har en metod kallas actionPerformed som bryter mot open closed principle
 eftersom om man utökar den så måste man lägga till fler if satser istl för att generalisera den.
-Just nu är Personalcars en vanlig klass som ärver från Cars. Men för att undvika kodduplicering bör
  PersonalCars vara en Abstract klass som har en gemensamkod för saab och volvo.



Vilka ansvarsområden har era klasser?

-Cars har ansvarsområdet över modellen för mvc pattern då den presenterar datan för bilar och hur de är organiserade.
-Carview ansvarar för vilka delar av datan i cars som ska presenteras samt hur de ska presenteras. med tanke på single repsonibility principle (varje klass har endast ett ansvarsområde)
den kommunicerar med carcontroller genom att kalla metoder från den när något körs. Den representerar hela delen av MVC pattern för simulator delen.
-Drawpanel har ansvarsområdet över den dynamiska delen. DrawPanel representerar den animerade delen av utseendet av bilbilderna.
-CarController har ansvaret för controllen som styr processen genom att säga åt cars att uppdatera dess data och lyssnar på carview för
säga åt simuleringen att börja. den kan även säga åt carview att uppdatera cars
med tanke på mvc patterns cykliska beroende. MVC modellen ansvarar så att SoC principen accepterar applikationen
då den separerar data(cars) och presentationen(carview) så att inte datahanteringen får konskvenser
pga förändringar i carview lagret. samt att cars kan omorganiseras
utan att behöva ändra i carview. MVC följer principen för SoC genom att en mellanliggande komponent som är carcontroller.


Vilka anledningar har de att förändras?

Ett enda skäl till att klasserna bör förändras är att varje klass bör ha ett enda ansvarsområde för att inte bryta mot SoC principen då
vi har just nu ett cyklisk aggregat relation mellan carView och Carcontroller då carview bör inte ha en direkt förbindelse till carcontroller
utan motsatsen. eftersom viewn har ingenting med hur controllen bör fungera.


På vilka klasser skulle ni behöva tillämpa dekomposition för att bättre följa SoC och SRP?
Soc = alla klasser ska ha egna ansvarsområden
SRP=alla metoder ska ha bara en sak

Dekompoisition bör tillämpas på Carview eftersom den presenterar hela vyn på bil simulatorn. och för att unvika att
det dynamiska biten ska blandas ihop med statiska biten så kan vi följa Soc att drawpanel är en innerklass i carview men att de har olika metoder och
ansvarar för olika områden samtidigt som det hela klassen presenterar view i mvc pattern.


Carcontroller i MVC pattern hanterar interaktioner mellan carView och Cars(modellen) som är både oberoende saker som kan
existera på egen hand.Därför bör Carcontroller referera till de genom assocation. De är inte sammansatta delar av carcontroller.

